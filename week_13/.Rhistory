test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_continuous(breaks = seq(0,12,by=1)) +
facet_wrap(~Year)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_continuous(breaks = seq(0,12,by=1)) +
facet_wrap(~Year)
```
# solution and documentation of the code goes below this line ...
months_suitable_for_road_construction <- act_weather_data %>%
mutate(
wind_speed = (as.numeric(`9am_wind_speed_(km/h)`) + as.numeric(`3pm_wind_speed_(km/h)`) )/2,
temperature = as.numeric((`9am_Temperature`+`3pm_Temperature`)/2),
humidity = as.numeric((`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2),
) %>%
group_by(Month) %>%
summarise(
mean_rainfall=mean(`Rainfall_(mm)`, na.rm = T),
mean_temp = mean(temperature, na.rm = T),
mean_windSpeed = mean(wind_speed, na.rm = T),
mean_humidity = mean(humidity, na.rm = T)
) %>%
filter(mean_temp >= 10 & mean_temp <= 30 & mean_windSpeed <= 40 & mean_humidity >= 30 & mean_humidity <= 70 & mean_rainfall < 3) %>%
summarise(months = Month)
months = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec")
months_suitable_for_road_construction
paste("The following months are suitable for road construction in ACT, Canberra : ", month[months_suitable_for_road_construction])
months_suitable_for_road_construction
paste("The following months are suitable for road construction in ACT, Canberra : ", month.name[months_suitable_for_road_construction])
months_suitable_for_road_construction
paste("The following months are suitable for road construction in ACT, Canberra : ", month.name[months_suitable_for_road_construction$months])
paste("The following months are suitable for road construction in ACT, Canberra : ", months[months_suitable_for_road_construction$months])
paste("The following months are suitable for road construction in ACT, Canberra : ")
print(month.name[months_suitable_for_road_construction$months])
print(months[months_suitable_for_road_construction$months])
paste("The following months are suitable for road construction in ACT, Canberra : ")
print(months[months_suitable_for_road_construction$months])
# solution and documentation of the code goes below this line ...
# reads ACT weather data
library(tidyverse)
AU_Date_Format <- "%d/%m/%Y"
US_Date_Format <- "%m/%d/%Y"
files <- list.files("data","*.csv")
act_weather_data <- tibble()
for(i in 1:length(files)){
data <- read_csv(paste0("data/", files[i]), skip= 7, show_col_types = FALSE)
assertthat::assert_that(nrow(problems(data)) == 0,
msg="There is still problem/s, which you need to fix first")
temp <- tryCatch(
expr    = {  parse_date(data$Date, AU_Date_Format)},
warning = function(e) { parse_date(data$Date, US_Date_Format)})
data$Date <- format(temp, AU_Date_Format)
act_weather_data <- rbind(act_weather_data, data)
}
# Clean up any temporary variables no longer needed
rm(files, data, temp, i)
str(act_weather_data)
summary(act_weather_data)
# checks the datatype of the Date column
class(act_weather_data$Date)
# as the type of date column is character, we will format it using as.Date() function
act_weather_data$Date <-  as.Date(act_weather_data$Date, format=AU_Date_Format)
# check the format of date column again, to ensure everything is as expected
class(act_weather_data$Date)
# seperates the Month and Year column
act_weather_data <- act_weather_data %>%
separate(col = Date, into = c('Year', 'Month', 'Day'), sep = '\\-', remove = F) %>%
mutate(
Year=as.numeric(Year),
Month=as.numeric(Month),
Day=as.numeric(Day)
)
knitr::opts_chunk$set(echo = TRUE)
# solution and documentation of the code goes below this line ...
# reads ACT weather data
library(tidyverse)
AU_Date_Format <- "%d/%m/%Y"
US_Date_Format <- "%m/%d/%Y"
files <- list.files("data","*.csv")
act_weather_data <- tibble()
for(i in 1:length(files)){
data <- read_csv(paste0("data/", files[i]), skip= 7, show_col_types = FALSE)
assertthat::assert_that(nrow(problems(data)) == 0,
msg="There is still problem/s, which you need to fix first")
temp <- tryCatch(
expr    = {  parse_date(data$Date, AU_Date_Format)},
warning = function(e) { parse_date(data$Date, US_Date_Format)})
data$Date <- format(temp, AU_Date_Format)
act_weather_data <- rbind(act_weather_data, data)
}
# Clean up any temporary variables no longer needed
rm(files, data, temp, i)
str(act_weather_data)
summary(act_weather_data)
# checks the datatype of the Date column
class(act_weather_data$Date)
# as the type of date column is character, we will format it using as.Date() function
act_weather_data$Date <-  as.Date(act_weather_data$Date, format=AU_Date_Format)
# check the format of date column again, to ensure everything is as expected
class(act_weather_data$Date)
# seperates the Month and Year column
act_weather_data <- act_weather_data %>%
separate(col = Date, into = c('Year', 'Month', 'Day'), sep = '\\-', remove = F) %>%
mutate(
Year=as.numeric(Year),
Month=as.numeric(Month),
Day=as.numeric(Day)
)
# plotting data
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_continuous(breaks = seq(0,12,by=1)) +
facet_wrap(~Year)
```
knitr::opts_chunk$set(echo = TRUE)
# solution and documentation of the code goes below this line ...
# reads ACT weather data
library(tidyverse)
AU_Date_Format <- "%d/%m/%Y"
US_Date_Format <- "%m/%d/%Y"
files <- list.files("data","*.csv")
act_weather_data <- tibble()
for(i in 1:length(files)){
data <- read_csv(paste0("data/", files[i]), skip= 7, show_col_types = FALSE)
assertthat::assert_that(nrow(problems(data)) == 0,
msg="There is still problem/s, which you need to fix first")
temp <- tryCatch(
expr    = {  parse_date(data$Date, AU_Date_Format)},
warning = function(e) { parse_date(data$Date, US_Date_Format)})
data$Date <- format(temp, AU_Date_Format)
act_weather_data <- rbind(act_weather_data, data)
}
# Clean up any temporary variables no longer needed
rm(files, data, temp, i)
months = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec")
str(act_weather_data)
summary(act_weather_data)
# checks the datatype of the Date column
class(act_weather_data$Date)
# as the type of date column is character, we will format it using as.Date() function
act_weather_data$Date <-  as.Date(act_weather_data$Date, format=AU_Date_Format)
# check the format of date column again, to ensure everything is as expected
class(act_weather_data$Date)
# seperates the Month and Year column
act_weather_data <- act_weather_data %>%
separate(col = Date, into = c('Year', 'Month', 'Day'), sep = '\\-', remove = F) %>%
mutate(
Year=as.numeric(Year),
Month=as.numeric(Month),
Day=as.numeric(Day)
)
# plotting data
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_continuous(breaks = seq(0,12,by=1)) +
facet_wrap(~Year)
```
knitr::opts_chunk$set(echo = TRUE)
# solution and documentation of the code goes below this line ...
# reads ACT weather data
library(tidyverse)
AU_Date_Format <- "%d/%m/%Y"
US_Date_Format <- "%m/%d/%Y"
files <- list.files("data","*.csv")
act_weather_data <- tibble()
for(i in 1:length(files)){
data <- read_csv(paste0("data/", files[i]), skip= 7, show_col_types = FALSE)
assertthat::assert_that(nrow(problems(data)) == 0,
msg="There is still problem/s, which you need to fix first")
temp <- tryCatch(
expr    = {  parse_date(data$Date, AU_Date_Format)},
warning = function(e) { parse_date(data$Date, US_Date_Format)})
data$Date <- format(temp, AU_Date_Format)
act_weather_data <- rbind(act_weather_data, data)
}
# Clean up any temporary variables no longer needed
rm(files, data, temp, i)
months = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec")
str(act_weather_data)
summary(act_weather_data)
# checks the datatype of the Date column
class(act_weather_data$Date)
# as the type of date column is character, we will format it using as.Date() function
act_weather_data$Date <-  as.Date(act_weather_data$Date, format=AU_Date_Format)
# check the format of date column again, to ensure everything is as expected
class(act_weather_data$Date)
# seperates the Month and Year column
act_weather_data <- act_weather_data %>%
separate(col = Date, into = c('Year', 'Month', 'Day'), sep = '\\-', remove = F) %>%
mutate(
Year=as.numeric(Year),
Month=as.numeric(Month),
Day=as.numeric(Day)
)
# plotting data
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
```
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
```
knitr::opts_chunk$set(echo = TRUE)
# solution and documentation of the code goes below this line ...
# reads ACT weather data
library(tidyverse)
AU_Date_Format <- "%d/%m/%Y"
US_Date_Format <- "%m/%d/%Y"
files <- list.files("data","*.csv")
act_weather_data <- tibble()
for(i in 1:length(files)){
data <- read_csv(paste0("data/", files[i]), skip= 7, show_col_types = FALSE)
assertthat::assert_that(nrow(problems(data)) == 0,
msg="There is still problem/s, which you need to fix first")
temp <- tryCatch(
expr    = {  parse_date(data$Date, AU_Date_Format)},
warning = function(e) { parse_date(data$Date, US_Date_Format)})
data$Date <- format(temp, AU_Date_Format)
act_weather_data <- rbind(act_weather_data, data)
}
# Clean up any temporary variables no longer needed
rm(files, data, temp, i)
months = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec")
str(act_weather_data)
summary(act_weather_data)
# checks the datatype of the Date column
class(act_weather_data$Date)
# as the type of date column is character, we will format it using as.Date() function
act_weather_data$Date <-  as.Date(act_weather_data$Date, format=AU_Date_Format)
# check the format of date column again, to ensure everything is as expected
class(act_weather_data$Date)
# seperates the Month and Year column
act_weather_data <- act_weather_data %>%
separate(col = Date, into = c('Year', 'Month', 'Day'), sep = '\\-', remove = F) %>%
mutate(
Year=as.numeric(Year),
Month=as.numeric(Month),
Day=as.numeric(Day)
)
# plotting data
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year)
# plotting data
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# plotting data
# prepares data for plotting
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# plotting data
# prepares data for plotting
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", group=1, size=1) +
geom_line(aes(y=mean_max_temp), color="red", group=2, size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", group=3, size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# plotting data
# prepares data for plotting
test_df <- act_weather_data %>%
mutate(
avg_temp=(`9am_Temperature`+`3pm_Temperature`)/2,
avg_humidity=(`9am_relative_humidity_(%)`+`3pm_relative_humidity_(%)`)/2
) %>%
group_by(Year, Month) %>%
summarise(
mean_min_temp=mean(Minimum_temperature),
mean_max_temp=mean(Maximum_temperature),
avg_temp_monthly = mean(avg_temp),
rainfall=mean(`Rainfall_(mm)`),
humidity=mean(avg_humidity)
)
str(test_df)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=rainfall), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(
title = "Distribution of Rainfall (2018 - 2023)",
x = "Month",
y = "Rainfall(mm))"
)
ggplot(test_df, aes(x=Month)) +
geom_line(aes(y=mean_min_temp), color="blue", size=1) +
geom_line(aes(y=mean_max_temp), color="red", size=1) +
geom_line(aes(y=avg_temp_monthly), color="black", size=1) +
scale_x_discrete(limits=months) +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(
title = "Distribution of Temperature (2018 - 2023)",
x = "Month",
y = "Temperature(dC))"
)
knitr::opts_chunk$set(echo = TRUE)
cars
?sample
?sample
cars
index <- sample(c(TRUE, FALSE), nrow(cars), replace = T, prob=c(0.8, 0.2))
index
?sample
index[index]
len(index[index])
length(index[index])
length(index)
length(index[index])
length(index[!index])
train = cars[index]
train = cars[[index]]
train = cars[index]
length(cars)
cars
length(cars)
train = cars[index,]
test = cars[!index,]
cars
index <- sample(c(TRUE, FALSE), nrow(cars), replace = T, prob=c(0.8, 0.2))
length(index)
length(index[!index])
?sample
train <-  cars[index,]
test <-  cars[!index,]
model <- lm(dist ~ speed, data = train)
model
summary(model)
predicted_distance <- predict(model, test)
predicted_distance
library(metrics)
library(metric)
install.packages("metrics")
install.packages("Metrics")
library(Metrics)
predicted_distance
error = rmse(test$dist, predicted_distance)
error
setwd("D:/workspace/ids/week_13")
df = read.csv("data/USA_Housing.csv")
df
