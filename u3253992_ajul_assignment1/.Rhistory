location <- weather$Location[i]
# stores the temperature
uv_index <- weather$UVIndex[i]
# checks if location is Sydney and temp is greater than 25
if(location %in% c('Canberra', 'Sydney') & uv_index > 7) {
# update days count
high_uv_days <- high_uv_days + 1
}
}
print(high_uv_days)
# to validate
weather %>%
filter(Location %in% c('Canberra', 'Sydney') & UVIndex > 7) %>%
summarise(count=n())
#----------------------------------#
#----------------------------------#
# 1-  The code for task 1 goes here
# Load the 5 files using read.csv or read_csv functions and combine them into one data frame.
# Please note that the first 7 rows of each files need to be ignored while loading the data.
# store filenames
file_names <- c('201812.csv', '201811.csv', '201810.csv', '201809.csv', '201808.csv')
create_file_paths <- function(file_name) {
file_path <- paste("data",file_name, sep = "/")
return(file_path)
}
file_paths <- sapply(file_names, create_file_paths)
custom_read_csv <- function(file_path) {
return(read.csv(file_path, skip=7))
}
data_list <- lapply(file_paths, custom_read_csv)
dim(data_list)
combined_df <- data.frame()
for(df in data_list) {
print(dim(df))
combined_df <- rbind(combined_df, df)
}
#----------------------------------#
# 2-  The code for task 2 goes here
# Check the dimensions of the combined data frame.
dim(combined_df)
#----------------------------------#
# 3-  The code for task 3 goes here
# Write a for loop to check the structure 'str()' and summary of each column.
col_names <- colnames(combined_df)
for(col in col_names) {
cat("Column Name: ", col, "\n")
cat('-------------------------\n')
cat("Structure: \n")
cat(str(combined_df[[col]]))
cat("\n")
cat("Summary: \n")
print(summary(combined_df[[col]]))
cat("\n")
}
#----------------------------------#
# 4-  The code for task 4 goes here
# Write a code to remove the variables, which have no data at all
# (i.e. all the records in these variables are NAs).
get_empty_col <- function(col_name) {
if(all(is.na(combined_df[[col_name]]))) {
print(col_name)
return(col_name)
}
return(NA)
}
empty_cols <- sapply(col_names, get_empty_col)
empty_cols <- empty_cols[!is.na(empty_cols)]
combined_df <- combined_df %>%
select(-empty_cols)
#----------------------------------#
# 5-  The code for task 5 goes here
# Write code to change the column names to have no spaces between the words
# and replace these spaces with underscore the _ character.
colnames(combined_df) <- gsub(" ", "_", colnames(combined_df))
colnames(combined_df)
#----------------------------------#
# 6-  The code for task 6 goes here
# Write code to create two new columns for the month and year from the Date column.
class(combined_df$Date)
combined_df$Date <- as.Date(combined_df$Date, format = "%d/%m/%Y")
combined_df <- combined_df %>%
separate(col = Date, into = c("Month", "Year"), remove = FALSE)
#----------------------------------#
# 7-  The code for task 7 goes here
# Write code to replace the remaining NAs with the median of the values of each column.
combined_df <- combined_df %>%
mutate(across(where(is.numeric), ~replace_na(.,median(.,na.rm=TRUE))))
# reference: https://www.statology.org/r-replace-na-with-median/
#----------------------------------#
# 8-  The code for task 8 goes here
# Write code to save the combined weather data file with all of these changes to a single file.
write.csv(combined_df, file = "combined_weather.csv")
#----------------------------------#
unlink("weatherdata_analysis_solution_ajul_u3253992_cache", recursive = TRUE)
setwd("D:/workspace/ids/u3253992_ajul_assignment1")
#----------------------------------#
# 2-  The code for task 2 goes here
summary(weather)
#----------------------------------#
# 3-  The code for task 3 goes here
hist(weather$Temperature)
#----------------------------------#
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Create a sequence of dates for the month of March 2023
dates <- seq(from = as.Date("2023-03-01"), to = as.Date("2023-05-31"), by = 1)
# Create a data frame to store the weather data
weather <- data.frame(
Date = dates,
Temperature = round(runif(length(dates), 15, 25), 1),
Humidity = sample(50:100, length(dates), replace = TRUE),
Pressure = sample(995:1015, length(dates), replace = TRUE),
WindSpeed = sample(5:20, length(dates), replace = TRUE),
WindDirection = sample(c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), length(dates), replace = TRUE),
DewPoint = round(runif(length(dates), 10, 15), 1),
CloudCover = sample(0:100, length(dates), replace = TRUE),
Precipitation = round(runif(length(dates), 0, 15), 1),
Visibility = sample(5:20, length(dates), replace = TRUE),
UVIndex = sample(1:5, length(dates), replace = TRUE),
Condition = sample(c("Sunny", "Partly Cloudy", "Rainy", "Snowy"), length(dates), replace = TRUE),
Location = rep(c("Sydney", "Canberra"), each = length(dates)/2)
)
# to check the data type of the data column
class(weather$Date)
# Extract the month and year from the "Date" column
weather$YearMonth <- format(weather$Date, "%Y-%m")
# extract year, month and date
weather <- weather %>%
separate(col=Date, into=c("Year","Month","Day"), sep="\\-", remove=FALSE)
#----------------------------------#
# 1-  The code for task 1 goes here
# Create a vector containing the average temperature readings for each month.
# using group_by and summarize to find the monthly average temperature
monthly_average_temperature <-
(
weather %>%
group_by(Month) %>%
summarize(average_temp = mean(Temperature))
)$average_temp
cat("Q1: Monthly average temperatures: ")
print(monthly_average_temperature)
#----------------------------------#
# 2-  The code for task 2 goes here
# Create two vector containing the average humidity readings for each month; one for Sydney and another for Canberra.
canberra_monthly_avg_humidity <-
(
weather %>%
filter(Location=='Canberra') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
sydney_monthly_average_humidity <-
(
weather %>%
filter(Location=='Sydney') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
cat("Q2: Monthly average humidity for Sydney and Canberra: \n")
print(canberra_monthly_avg_humidity)
print(sydney_monthly_average_humidity)
#----------------------------------#
# 3-  The code for task 3 goes here
# Create a matrix containing the average temperature, humidity, pressure, and wind speed readings for each month.
# first let's calculate the average values of these parameters using tidyverse functions group_by and summarize.
monthly_averages_df <- weather %>%
group_by(Month) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
monthly_averages_df <- monthly_averages_df %>% select(-Month)
# as the next step, we will convert the df into a matrix
# reference: https://stat.ethz.ch/R-manual/R-devel/library/base/html/data.matrix.html
monthly_averages <- data.matrix(monthly_averages_df)
# is.matrix(monthly_averages)
print("Matrix containing the average temperature, humidity, pressure, and wind speed readings for each month: ")
monthly_averages
#----------------------------------#
# 4-  The code for task 4 goes here
# Create another matrix containing the average temperature, humidity, pressure, and wind speed readings for each city.
city_averages_df <- weather %>%
group_by(Location) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
city_averages_df <- city_averages_df %>% select(-Location)
# as the next step, we will convert the df into a matrix
# reference: https://stat.ethz.ch/R-manual/R-devel/library/base/html/data.matrix.html
city_averages <- data.matrix(city_averages_df)
# is.matrix(city_averages)
print("Matrix containing the average temperature, humidity, pressure, and wind speed readings for each city: ")
city_averages
#----------------------------------#
# 5-  The code for task 5 goes here
# Create an array containing the average temperature, humidity, pressure, wind speed, and UV index readings for each day of each month.
months_vec <- unique(weather$Month)
# Determine the dimensions of your 3D array
num_rows <- 31
num_cols <- 5
num_months <- length(months_vec)
# Initialize the 3D array with NA values
avg_readings_array <- array(NA, c(num_rows, num_cols, num_months))
for (i in 1:length(months_vec)) {
temp_df <- weather %>%
filter( Month == months_vec[i]) %>%
select(Temperature,Humidity,Pressure, WindSpeed, UVIndex)
avg_read_mat <- as.matrix(temp_df)
if(nrow(avg_read_mat) < 31) {
avg_read_mat <- rbind(avg_read_mat, numeric(5))
}
avg_readings_array[ , ,i] <- avg_read_mat
}
avg_readings_array
#----------------------------------#
# 6-  The code for task 6 goes here
# Create an array containing the average temperature, humidity, pressure, wind speed, and UV index
# readings for each day of each month, for each city.
cities_vec <- unique(weather$Location)
fourth_dimension <- length(cities_vec)
depth <- length(months_vec)
rows <- 31 # max(city_df$count)
cols <- 5
cities_monthly_avg_arr <- array(NA, c(rows, cols, depth, fourth_dimension))
for(k in 1:fourth_dimension) {
city_df <- weather %>%
filter(Location == cities_vec[k])
temp_arr <- array(NA, c(rows, cols, depth))
for (i in 1:length(months_vec)) {
temp_df <- city_df %>%
filter( Month == months_vec[i]) %>%
select(Temperature,Humidity,Pressure, WindSpeed, UVIndex)
avg_read_mat <- as.matrix(temp_df)
while(nrow(avg_read_mat) < 31) {
avg_read_mat <- rbind(avg_read_mat, numeric(5))
}
temp_arr[ , ,i] <- avg_read_mat
}
cities_monthly_avg_arr[ , , , k] <- temp_arr
}
cities_monthly_avg_arr
#----------------------------------#
# 7-  The code for task 7 goes here
# Use matrix multiplication to calculate the product of the transpose of the matrix in task 3 with the vector in task 1.
# vector from task 1
cat("Task 1: vector containing monthly average temperatures: \n")
cat("------------------------------------------------------\n")
print(monthly_average_temperature)
cat("\n")
# matrix from task 3
cat("Task 3: matrix containing the average temperature, humidity, pressure, and wind speed readings for each month: \n")
cat("-------------------------------------------------------------------\n")
print(monthly_averages)
cat("\n")
# matrix transpose
cat("Transpose of the matrix : \n")
cat("------------------------------------------------------\n")
mat_transpose <- t(monthly_averages)
print(mat_transpose)
cat("\n")
# matrix multiplication
product <- mat_transpose %*% monthly_average_temperature
rownames(product) <- NULL
cat("\n Product of matrix multiplication:\n")
cat("---------------------------------\n")
print(product)
#----------------------------------#
#----------------------------------#
# 1-  The code for task 1 goes here
# Write a loop that calculates the average pressure reading for each month and stores the results in a vector.
# Initialize lists with month names as names
monthly_pressure_readings_sum <- list()
monthly_pressure_readings_count <- list()
for (i in 1:nrow(weather)) {
key <- weather$Month[i]
pressure <- as.numeric(weather$Pressure[i])
# Check if the key (month) is already in the lists, and if not, initialize it
if (!(key %in% names(monthly_pressure_readings_sum))) {
monthly_pressure_readings_sum[[key]] <- 0
monthly_pressure_readings_count[[key]] <- 0
}
# Update the sum and count for the corresponding month
monthly_pressure_readings_sum[[key]] <- monthly_pressure_readings_sum[[key]] + pressure
monthly_pressure_readings_count[[key]] <- monthly_pressure_readings_count[[key]] + 1
}
average_monthly_pressure <- c()
for (month in names(monthly_pressure_readings_sum)) {
average_value <- monthly_pressure_readings_sum[[month]]/monthly_pressure_readings_count[[month]]
average_monthly_pressure <- c(average_monthly_pressure,average_value)
}
average_monthly_pressure
#----------------------------------#
# 2-  The code for task 2 goes here
# Use a conditional statement to determine how many days had a temperature above 25 degrees Celsius in Sydney.
# variable to store the no. of instances where the Sydney temp is greater than 25 degree celcius
high_temp_count <- 0
# looping through df
for (i in 1:nrow(weather)) {
# stores location
location <- weather$Location[i]
# stores the temperature
temp <- weather$Temperature[i]
# checks if location is Sydney and temp is greater than 25
if(location == 'Sydney' & temp > 25) {
# updates the temp count
high_temp_count = high_temp_count + 1
}
}
# print the output
print(high_temp_count)
# to validate
# weather %>%
#   filter(Location == 'Sydney' & Temperature > 25)
#----------------------------------#
# 3-  The code for task 3 goes here
# Use a for loop to calculate the average humidity for the days with a temperature below 21 degrees Celsius in Canberra.
humidity_sum <- 0
days_count <- 0
for (i in 1:nrow(weather)) {
# stores location
location <- weather$Location[i]
# stores the temperature
temp <- weather$Temperature[i]
# checks if location is Sydney and temp is greater than 25
if(location == 'Canberra' & temp < 21) {
# update days count
days_count <- days_count + 1
# sum humidity to calculate average
humidity_sum <- humidity_sum + weather$Humidity[i]
}
}
average_humidity <- humidity_sum/days_count
average_humidity
# to validate
# weather %>%
#   filter(Location == 'Canberra' & Temperature < 21) %>%
#   summarise(mean_humidity=mean(Humidity))
#----------------------------------#
# 4-  The code for task 4 goes here
# variable to store the high uv days
high_uv_days <- 0
for (i in 1:nrow(weather)) {
# stores location
location <- weather$Location[i]
# stores the temperature
uv_index <- weather$UVIndex[i]
# checks if location is Sydney and temp is greater than 25
if(location %in% c('Canberra', 'Sydney') & uv_index > 7) {
# update days count
high_uv_days <- high_uv_days + 1
}
}
print(high_uv_days)
# to validate
weather %>%
filter(Location %in% c('Canberra', 'Sydney') & UVIndex > 7) %>%
summarise(count=n())
#----------------------------------#
#----------------------------------#
# 1-  The code for task 1 goes here
# Load the 5 files using read.csv or read_csv functions and combine them into one data frame.
# Please note that the first 7 rows of each files need to be ignored while loading the data.
# store filenames
file_names <- c('201812.csv', '201811.csv', '201810.csv', '201809.csv', '201808.csv')
create_file_paths <- function(file_name) {
file_path <- paste("data",file_name, sep = "/")
return(file_path)
}
file_paths <- sapply(file_names, create_file_paths)
custom_read_csv <- function(file_path) {
return(read.csv(file_path, skip=7))
}
data_list <- lapply(file_paths, custom_read_csv)
dim(data_list)
combined_df <- data.frame()
for(df in data_list) {
print(dim(df))
combined_df <- rbind(combined_df, df)
}
#----------------------------------#
# 2-  The code for task 2 goes here
# Check the dimensions of the combined data frame.
dim(combined_df)
#----------------------------------#
# 3-  The code for task 3 goes here
# Write a for loop to check the structure 'str()' and summary of each column.
col_names <- colnames(combined_df)
for(col in col_names) {
cat("Column Name: ", col, "\n")
cat('-------------------------\n')
cat("Structure: \n")
cat(str(combined_df[[col]]))
cat("\n")
cat("Summary: \n")
print(summary(combined_df[[col]]))
cat("\n")
}
#----------------------------------#
# 4-  The code for task 4 goes here
# Write a code to remove the variables, which have no data at all
# (i.e. all the records in these variables are NAs).
get_empty_col <- function(col_name) {
if(all(is.na(combined_df[[col_name]]))) {
print(col_name)
return(col_name)
}
return(NA)
}
empty_cols <- sapply(col_names, get_empty_col)
empty_cols <- empty_cols[!is.na(empty_cols)]
combined_df <- combined_df %>%
select(-empty_cols)
#----------------------------------#
# 5-  The code for task 5 goes here
# Write code to change the column names to have no spaces between the words
# and replace these spaces with underscore the _ character.
colnames(combined_df) <- gsub(" ", "_", colnames(combined_df))
colnames(combined_df)
#----------------------------------#
# 6-  The code for task 6 goes here
# Write code to create two new columns for the month and year from the Date column.
class(combined_df$Date)
combined_df$Date <- as.Date(combined_df$Date, format = "%d/%m/%Y")
combined_df <- combined_df %>%
separate(col = Date, into = c("Month", "Year"), remove = FALSE)
#----------------------------------#
# 7-  The code for task 7 goes here
# Write code to replace the remaining NAs with the median of the values of each column.
combined_df <- combined_df %>%
mutate(across(where(is.numeric), ~replace_na(.,median(.,na.rm=TRUE))))
# reference: https://www.statology.org/r-replace-na-with-median/
#----------------------------------#
# 8-  The code for task 8 goes here
# Write code to save the combined weather data file with all of these changes to a single file.
write.csv(combined_df, file = "combined_weather.csv")
#----------------------------------#
rm(list = ls())
setwd("D:/workspace/ids/u3253992_ajul_assignment1")
unlink("weatherdata_analysis_solution_ajul_u3253992_cache", recursive = TRUE)
canberra_monthly_avg_humidity <-
(
weather %>%
filter(Location=='Canberra') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
rm(list = ls())
# Set the seed for reproducibility
set.seed(123)
# Create a sequence of dates for the month of March 2023
dates <- seq(from = as.Date("2023-03-01"), to = as.Date("2023-05-31"), by = 1)
# Create a data frame to store the weather data
weather <- data.frame(
Date = dates,
Temperature = round(runif(length(dates), 15, 25), 1),
Humidity = sample(50:100, length(dates), replace = TRUE),
Pressure = sample(995:1015, length(dates), replace = TRUE),
WindSpeed = sample(5:20, length(dates), replace = TRUE),
WindDirection = sample(c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), length(dates), replace = TRUE),
DewPoint = round(runif(length(dates), 10, 15), 1),
CloudCover = sample(0:100, length(dates), replace = TRUE),
Precipitation = round(runif(length(dates), 0, 15), 1),
Visibility = sample(5:20, length(dates), replace = TRUE),
UVIndex = sample(1:5, length(dates), replace = TRUE),
Condition = sample(c("Sunny", "Partly Cloudy", "Rainy", "Snowy"), length(dates), replace = TRUE),
Location = rep(c("Sydney", "Canberra"), each = length(dates)/2)
)
# do the required here to check the generated data
# check contenets of weather dataframe
print(weather)
# to check dimensions of dataframe
dim(weather)
# check structure of data frame
str(weather)
canberra_monthly_avg_humidity <-
(
weather %>%
filter(Location=='Canberra') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
library(tidyverse)
# to check the data type of the data column
class(weather$Date)
# Extract the month and year from the "Date" column
weather$YearMonth <- format(weather$Date, "%Y-%m")
# extract year, month and date
weather <- weather %>%
separate(col=Date, into=c("Year","Month","Day"), sep="\\-", remove=FALSE)
canberra_monthly_avg_humidity <-
(
weather %>%
filter(Location=='Canberra') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
sydney_monthly_average_humidity <-
(
weather %>%
filter(Location=='Sydney') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
cat("Q2: Monthly average humidity for Sydney and Canberra: \n")
print(canberra_monthly_avg_humidity)
print(sydney_monthly_average_humidity)
