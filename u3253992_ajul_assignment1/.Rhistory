city_averages_df <- weather %>%
group_by(Location) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
# first let's calculate the average values of these parameters using tidyverse functions group_by and summarize.
monthly_averages_df <- weather %>%
group_by(Month) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
city_averages_df <- weather %>%
group_by(Location) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
city_averages_df
city_averages <- data.matrix(city_averages_df)
is.matrix(city_averages)
city_averages
# check structure of data frame
str(weather)
weather <- weather %>%
mutate(DayOfWeek = weekdays(Date))
weather$DayOfWeek
# monthly_averages_by_day_df <-
weather %>%
group_by(Month, DayOfWeek) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
# monthly_averages_by_day_df <-
weather %>%
group_by(Month, DayOfWeek) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed),
average_UV_index = mean(UVIndex)
)
monthly_averages_by_day_df
monthly_averages_by_day_df <-
weather %>%
group_by(Month, DayOfWeek) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed),
average_UV_index = mean(UVIndex)
)
monthly_averages_by_day_df
months <- distinct(monthly_averages_by_day_df, Month)
months
months <- unique(monthly_averages_by_day_df$Month)
months
# create a vector of months
months <- length(unique(monthly_averages_by_day_df$Month))
months
monthly_averages_by_day_df
ncol(monthly_averages_by_day_df)
monthly_averages_by_day_df
n_col
n_col <- ncol(monthly_averages_by_day_df)-2
n_col
# creating a variable to hold row length for the array, which would be no. of days in a week
length(unique(monthly_averages_by_day_df$DayOfWeek))
# creating a variable to hold row length for the array, which would be no. of days in a week
# length(unique(monthly_averages_by_day_df$DayOfWeek))
n_rows <- 7
# calculating col length for the array
n_cols <- ncol(monthly_averages_by_day_df) - 2 # reducing the columns month and weekday
n_cols
# initializing an empty 3D array
monthly_averages_by_day_arr <- array(NA, c(n_rows, n_cols, n_slices))
# create a vector of months
n_slices <- length(unique(monthly_averages_by_day_df$Month))
n_slices
# initializing an empty 3D array
monthly_averages_by_day_arr <- array(NA, c(n_rows, n_cols, n_slices))
# create a vector of months
months <- unique(monthly_averages_by_day_df$Month)
months
for (i in 1:n_slices) {
curr_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
curr_df
}
print(curr_df)
for (i in 1:n_slices) {
curr_df <- monthly_averages_by_day_df %>%
filter(Month == months[i]) %>%
arrange(DayOfWeek)
print(curr_df)
}
for (i in 1:n_slices) {
curr_df <- monthly_averages_by_day_df %>%
filter(Month == months[i]) %>%
arrange(DayOfWeek)
cat(curr_df)
}
print(curr_df)
print(curr_df)
curr_df <- monthly_averages_by_day_df %>%
filter(Month == months[i]) %>%
arrange(DayOfWeek)
print(curr_df)
for (i in 1:n_slices) {
curr_df <- monthly_averages_by_day_df %>%
filter(Month == months[i]) %>%
arrange(DayOfWeek)
print(curr_df)
}
days_of_week <- unique(monthly_averages_by_day_df$DayOfWeek)
days_of_week
days_of_week <- sort(unique(monthly_averages_by_day_df$DayOfWeek))
days_of_week
days_of_week <- sort(days_of_week)
# for( j in  1:n_rows) {
#   curr_day_df <- curr_month_df %>%
#     filter()
# }
print(curr_df)
print(curr_day_df)
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j]) %>%
select(-c('Month', 'DayOfWeek'))
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j]) %>%
select(-c('Month', 'DayOfWeek'))
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j]) %>%
select(-Month, -DayOfWeek))
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j]) %>%
select(- Month, - DayOfWeek))
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j]) %>%
select(-Month,-DayOfWeek)
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
print(select(curr_day_df, -Month, -DayOfWeek))
}
# print(curr_df)
}
print(select(curr_day_df, - Month:DayOfWeek))
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
print(select(curr_day_df, -c(Month:DayOfWeek)))
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
print(select(curr_day_df, -Month))
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
print(select(curr_day_df, -(Month), -(DayOfWeek) ))
}
# print(curr_df)
}
print(select(curr_day_df, average_temp:average_UV_index))
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
print(select(curr_day_df, average_temp:average_UV_index))
}
# print(curr_df)
}
print(curr_day_df)
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <-  select(curr_day_df, average_temp:average_UV_index)
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <-  select(curr_day_df, average_temp:average_UV_index, -Month)
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
# curr_day_df <-  select(curr_day_df, average_temp:average_UV_index, -Month)
curr_day_df <- curr_day_df[, -which(names(curr_day_df) == "Month")]
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
# curr_day_df <-  select(curr_day_df, average_temp:average_UV_index, -Month)
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
print(curr_day_df)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
print(curr_day_df[[1]])
}
# print(curr_df)
}
print(curr_day_df[1])
print(curr_day_df[1,])
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
print(unlist(curr_day_df[1,]))
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- c(unlist(curr_day_df[1,]))
print(cur_day_vec)
}
# print(curr_df)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = n_rows, ncol = n_cols)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
}
print(data_matrix)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = n_rows, ncol = n_cols)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
print(cur_day_vec)
}
print(data_matrix)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = 0, ncol = 0)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
print(cur_day_vec)
}
print(data_matrix)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = 0, ncol = 0)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
# print(cur_day_vec)
}
print(data_matrix)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = 0, ncol = 5)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
# print(cur_day_vec)
}
print(data_matrix)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = 0, ncol = 5)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
# print(cur_day_vec)
}
# print(data_matrix)
monthly_averages_by_day_arr[ , ,i] <- data_matrix
print(monthly_averages_by_day_arr)
}
for (i in 1:n_slices) {
curr_month_df <- monthly_averages_by_day_df %>%
filter(Month == months[i])
data_matrix <- matrix(data = NA, nrow = 0, ncol = 5)
for( j in  1:n_rows) {
curr_day_df <- curr_month_df %>%
filter(DayOfWeek == days_of_week[j])
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Month", "DayOfWeek"))]
cur_day_vec <- unlist(curr_day_df[1,])
data_matrix <- rbind(data_matrix, cur_day_vec)
# print(cur_day_vec)
}
# print(data_matrix)
monthly_averages_by_day_arr[ , ,i] <- data_matrix
}
print(monthly_averages_by_day_arr)
city_averages_by_day_df <-
weather %>%
group_by(Location, DayOfWeek) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed),
average_UV_index = mean(UVIndex)
)
city_averages_by_day_df
cities <- unique(monthly_averages_by_day_df$Month)
cities
cities <- unique(monthly_averages_by_day_df$Location)
cities
cities <- unique(city_averages_by_day_df$Location)
cities
n_city_slices <- length(unique(city_averages_by_day_df$Location))
n_city_slices
n_cols <- ncol(monthly_averages_by_day_df) - 2 # reducing the columns month and weekday
n_cols
n_cols <- ncol(city_averages_by_day_df) - 2 # reducing the columns month and weekday
n_cols
n_rows <- 7
days_of_week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# initializing an empty 3D array
city_averages_by_day_arr <- array(NA, c(n_rows, n_cols, n_slices))
n_rows <- 7
# stores days of week in required order
days_of_week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# initializing an empty 3D array
city_averages_by_day_arr <- array(NA, c(n_rows, n_cols, n_slices))
# starts the loop
for (i in 1:n_city_slices) {
# extracting the data for the current city( i.e indexed city in loop)
curr_city_df <- city_averages_by_day_df %>%
filter(Location == cities[i])
# initialize the data matrix to which average reading for each day will be stored in order
# the rows of this matrix represents the weekday starting from Monday.
# i.e first row represents Monday
# the columns represents the average readings, it follows the same order as that of the 'monthly_averages_by_day_df' dataframe
data_matrix <- matrix(data = NA, nrow = 0, ncol = n_cols)
# starts the inner loop, where we will loop through each day of the week
for( j in  1:n_rows) {
# filtering the current month data frame, based on weekdays so that they can be stored in order to the matrix
# this will ensure that first row in a slice always represents average readings on mondays of a given city
curr_day_df <- curr_city_df %>%
filter(DayOfWeek == days_of_week[j])
# removing location/city and day columns
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Location", "DayOfWeek"))]
# converting the df row into a vector
cur_day_vec <- unlist(curr_day_df[1,])
# storing the weekdays(rows) x average readings(cols) to a matrix, where first row represents monday, second tuesday, e.t.c
data_matrix <- rbind(data_matrix, cur_day_vec)
}
# print(data_matrix)
# storing the matrix to each slice of the 3D array
# each slice represents the data of a particular month
city_averages_by_day_arr[ , ,i] <- data_matrix
}
# prints the 3D array
print(city_averages_by_day_arr)
city_averages_by_day_arr <- array(NA, c(n_rows, n_cols, n_city_slices))
# starts the loop
for (i in 1:n_city_slices) {
# extracting the data for the current city( i.e indexed city in loop)
curr_city_df <- city_averages_by_day_df %>%
filter(Location == cities[i])
# initialize the data matrix to which average reading for each day will be stored in order
# the rows of this matrix represents the weekday starting from Monday.
# i.e first row represents Monday
# the columns represents the average readings, it follows the same order as that of the 'monthly_averages_by_day_df' dataframe
data_matrix <- matrix(data = NA, nrow = 0, ncol = n_cols)
# starts the inner loop, where we will loop through each day of the week
for( j in  1:n_rows) {
# filtering the current month data frame, based on weekdays so that they can be stored in order to the matrix
# this will ensure that first row in a slice always represents average readings on mondays of a given city
curr_day_df <- curr_city_df %>%
filter(DayOfWeek == days_of_week[j])
# removing location/city and day columns
curr_day_df <- curr_day_df[, -which(names(curr_day_df) %in% c("Location", "DayOfWeek"))]
# converting the df row into a vector
cur_day_vec <- unlist(curr_day_df[1,])
# storing the weekdays(rows) x average readings(cols) to a matrix, where first row represents monday, second tuesday, e.t.c
data_matrix <- rbind(data_matrix, cur_day_vec)
}
# print(data_matrix)
# storing the matrix to each slice of the 3D array
# each slice represents the data of a particular month
city_averages_by_day_arr[ , ,i] <- data_matrix
}
# prints the 3D array
print(city_averages_by_day_arr)
