print(matY)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vectY, 2)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vecY, 2)
print(matY)
print(matY[1,])
print(matY)
# Display the values of elements of the first row from matrix matX.
print(matX[1,])
# Display the value of the element in the second row and third column of matY,
print(matY[2,3])
# Sum up the two matrices and display the output,
matSum = matX + matY
print(matSum)
# Subtract the matY from matX and display the output,
matDifference = matX - matY
print(matDifference)
matProductE = matX * matY
print(matProductE)
print(matZ)
# Transpose the matY and assign the output to a third matrix called matZ,
matZ = t(matY)
print(matZ)
# Perform matrix multiplication between matX and matZ and assign the output to matW,
matW = matX %*% matZ
print(matW)
# Display the dimension of the matW matrix,
paste("Dimension of the matW, which stores the output of matrix multiplication between matX and matZ is ", dim(matW))
# Display the dimension of the matW matrix,
paste("Dimension of the matW, which stores the output of matrix multiplication between matX and matZ is ", dim(matW))
print(dim(matW))
maximum = max(matW)
paste("maximum value in matW is", maximum)
minimum = min(matW)
paste("minimum value in matW is", minimum)
average = mean(matW)
paste("average of values in matW is", minimum)
vecZ <- c(8, -3, 1, 7, 0, 4)
paste(vecX,vecY, vecZ, sep = "\n")
paste(vecX,vecY, vecZ,collapse = "\n")
paste(vecX,vecY, vecZ,collapse = "     ")
print(vecZ)
print(vecX)
print(vecY)
print(vecZ)
vecY <- c(5, 2, 0, 9, 3, 4)
print(vecX)
print(vecY)
print(vecZ)
print(class(vecY))
# Create an array from the three vector and give it a name (e.g., arrNums). The dimension of this array is (3,2,3)
arrNums <- array(c(vecX,vecY,vecZ), dim = c(3,2,3))
# what is the element of the second row and first column of the third slice of the array
element <- arrNums[2,1,3]
# print this element
print(element)
cat(max(arrNums))
min(arrNums)
median(arrNums)
mean(arrNums)
authors=c("Reda", "John", "Edward", "Ben")
year=c(2104, 2016, 2005, 2019)
publishers=c("Wiley", "Springer", "Sage", "International Books")
books <- data.frame(authors=authors, year= year, publishers= publishers)
# print the data frame entries
print(books)
# print the values of the authors entry
books$authors
# or ...
books["authors"] # what will happen if you use double square brackets? books[["authors"]]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
knitr::opts_chunk$set(echo = TRUE)
# vectors
x <- c(1,2,3,4,5,6,7,8)
y <- 1:5
a <- seq(1,5,2)
# vectors
x <- c(1,2,3,4,5,6,7,8)
y <- 1:5
a <- seq(1,5,2)
b <- seq(from=0,to= 18,length=20)
# vectors
x <- c(1,2,3,4,5,6,7,8)
y <- 1:5
a <- seq(1,5,2)
b <- seq(from=0,to= 20,length=20)
b <- seq(from=1,to= 20,length=20)
c <- seq(from=1,length=30, by=5)
cat(class(x))
cat(class(y))
cat(unclass(y))
typeof(x)
typeof(x)
typeof(y)
z <- vector("integer", x)
summary(weather)
# Set the seed for reproducibility
set.seed(123)
# Create a sequence of dates for the month of March 2023
dates <- seq(from = as.Date("2023-03-01"), to = as.Date("2023-05-31"), by = 1)
# Create a data frame to store the weather data
weather <- data.frame(
Date = dates,
Temperature = round(runif(length(dates), 15, 25), 1),
Humidity = sample(50:100, length(dates), replace = TRUE),
Pressure = sample(995:1015, length(dates), replace = TRUE),
WindSpeed = sample(5:20, length(dates), replace = TRUE),
WindDirection = sample(c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), length(dates), replace = TRUE),
DewPoint = round(runif(length(dates), 10, 15), 1),
CloudCover = sample(0:100, length(dates), replace = TRUE),
Precipitation = round(runif(length(dates), 0, 15), 1),
Visibility = sample(5:20, length(dates), replace = TRUE),
UVIndex = sample(1:5, length(dates), replace = TRUE),
Condition = sample(c("Sunny", "Partly Cloudy", "Rainy", "Snowy"), length(dates), replace = TRUE),
Location = rep(c("Sydney", "Canberra"), each = length(dates)/2)
)
# do the required here to check the generated data
# check contenets of weather dataframe
print(weather)
# to check dimensions of dataframe
dim(weather)
# check structure of data frame
str(weather)
summary(weather)
hist(weather$Temperature)
monthly_average_temperature <-
(
weather %>%
group_by(Month) %>%
summarize(average_temp = mean(Temperature))
)$average_temp
# to check the data type of the data column
class(weather$Date)
# Extract the month and year from the "Date" column
weather$YearMonth <- format(weather$Date, "%Y-%m")
# extract year, month and date
weather <- weather %>%
separate(col=Date, into=c("Year","Month","Day"), sep="\\-", remove=FALSE)
library(tidyverse)
# to check the data type of the data column
class(weather$Date)
# Extract the month and year from the "Date" column
weather$YearMonth <- format(weather$Date, "%Y-%m")
# extract year, month and date
weather <- weather %>%
separate(col=Date, into=c("Year","Month","Day"), sep="\\-", remove=FALSE)
monthly_average_temperature <-
(
weather %>%
group_by(Month) %>%
summarize(average_temp = mean(Temperature))
)$average_temp
cat("Q1: Monthly average temperatures: ")
print(monthly_average_temperature)
city_averages_df <- weather %>%
group_by(Location) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
city_averages_df <- city_averages_df %>% select(-Location)
# as the next step, we will convert the df into a matrix
# reference: https://stat.ethz.ch/R-manual/R-devel/library/base/html/data.matrix.html
city_averages <- data.matrix(city_averages_df)
# is.matrix(city_averages)
print("Matrix containing the average temperature, humidity, pressure, and wind speed readings for each city: ")
city_averages
canberra_monthly_avg_humidity <-
(
weather %>%
filter(Location=='Canberra') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
sydney_monthly_average_humidity <-
(
weather %>%
filter(Location=='Sydney') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
cat("Q2: Monthly average humidity for Sydney and Canberra: \n")
print(canberra_monthly_avg_humidity)
print(sydney_monthly_average_humidity)
canberra_monthly_avg_humidity <-
(
weather %>%
filter(Location=='Canberra') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
sydney_monthly_average_humidity <-
(
weather %>%
filter(Location=='Sydney') %>%
group_by(Month) %>%
summarise(average_humidity=mean(Humidity))
)$average_humidity
cat("Q2: Monthly average humidity for Canberra: \n")
print(canberra_monthly_avg_humidity)
cat("Q2: Monthly average humidity for Sydney: \n")
print(sydney_monthly_average_humidity)
# first let's calculate the average values of these parameters using tidyverse functions group_by and summarize.
monthly_averages_df <- weather %>%
group_by(Month) %>%
summarize(
average_temp = mean(Temperature),
average_humidity = mean(Humidity),
average_pressure = mean(Pressure),
average_wind_speed = mean(WindSpeed)
)
monthly_averages_df <- monthly_averages_df %>% select(-Month)
# as the next step, we will convert the df into a matrix
# reference: https://stat.ethz.ch/R-manual/R-devel/library/base/html/data.matrix.html
monthly_averages <- data.matrix(monthly_averages_df)
# is.matrix(monthly_averages)
print("Matrix containing the average temperature, humidity, pressure, and wind speed readings for each month: ")
monthly_averages
months_vec <- unique(weather$Month)
# Determine the dimensions of your 3D array
num_rows <- 31
num_cols <- 5
num_months <- length(months_vec)
# Initialize the 3D array with NA values
avg_readings_array <- array(NA, c(num_rows, num_cols, num_months))
# runs a loop to store the data for each month
for (i in 1:length(months_vec)) {
# filters and selects the required data and stores in a temporary dataframe
temp_df <- weather %>%
filter( Month == months_vec[i]) %>%
select(Temperature,Humidity,Pressure, WindSpeed, UVIndex)
# converts the temp data frame to a matrix
avg_read_mat <- as.matrix(temp_df)
# checks if the rows of the matrix is as per the expected dimensions
if(nrow(avg_read_mat) < 31) {
# if the dimensions donot match add more rows with zero values to adjust the dimensions
avg_read_mat <- rbind(avg_read_mat, numeric(5))
}
# append the matrix to the array
avg_readings_array[ , ,i] <- avg_read_mat
}
Print("PART B: Q5: Array containing the average temperature, humidity, pressure, wind speed, and UV index readings for each day of each month: ")
months_vec <- unique(weather$Month)
# Determine the dimensions of your 3D array
num_rows <- 31
num_cols <- 5
num_months <- length(months_vec)
# Initialize the 3D array with NA values
avg_readings_array <- array(NA, c(num_rows, num_cols, num_months))
# runs a loop to store the data for each month
for (i in 1:length(months_vec)) {
# filters and selects the required data and stores in a temporary dataframe
temp_df <- weather %>%
filter( Month == months_vec[i]) %>%
select(Temperature,Humidity,Pressure, WindSpeed, UVIndex)
# converts the temp data frame to a matrix
avg_read_mat <- as.matrix(temp_df)
# checks if the rows of the matrix is as per the expected dimensions
if(nrow(avg_read_mat) < 31) {
# if the dimensions donot match add more rows with zero values to adjust the dimensions
avg_read_mat <- rbind(avg_read_mat, numeric(5))
}
# append the matrix to the array
avg_readings_array[ , ,i] <- avg_read_mat
}
print("PART B: Q5: Array containing the average temperature, humidity, pressure, wind speed, and UV index readings for each day of each month: ")
avg_readings_array
# creates a vec containing the distinct cities in dataframe
cities_vec <- unique(weather$Location)
# calculate the dimensions of the 4D array
fourth_dimension <- length(cities_vec)
depth <- length(months_vec)
rows <- 31
cols <- 5
# initialize the 4D array
cities_monthly_avg_arr <- array(NA, c(rows, cols, depth, fourth_dimension))
# creates a loop for each city (iterates n times , if there are n no. of cities)
for(k in 1:fourth_dimension) {
# extract data from weather dataframe for the city at index k in cities_vec
city_df <- weather %>%
filter(Location == cities_vec[k])
# creates a temporary 3D array to hold monthly data for the city at index k
# this 3D array will be later appended to the 4D array
temp_arr <- array(NA, c(rows, cols, depth))
# loop to extract data for each month
for (i in 1:length(months_vec)) {
# extracts data for each month from city data frame (which was already filtered to contain data of the city(at k-th index) alone)
temp_df <- city_df %>%
filter( Month == months_vec[i]) %>%
select(Temperature,Humidity,Pressure, WindSpeed, UVIndex)
# store the temp_df as a matrix
avg_read_mat <- as.matrix(temp_df)
# if the no. of rows doesn't conforms to the expected dimensions add more rows with zero values
while(nrow(avg_read_mat) < 31) {
avg_read_mat <- rbind(avg_read_mat, numeric(5))
}
# add the matrix to the i-th slice of the 3D array, each slice represents average readings per day for a particular month
temp_arr[ , ,i] <- avg_read_mat
}
# add each 3D array to the 4D array, where each depth represents average readings for each day for each month for one city
# as we only have two cities, the 4D array has a depth of 2
cities_monthly_avg_arr[ , , , k] <- temp_arr
}
print("PART B: Q6: Array containing the average temperature, humidity, pressure, wind speed, and UV index readings for each day of each month, for each city: ")
cities_monthly_avg_arr
# Use matrix multiplication to calculate the product of the transpose of the matrix in task 3 with the vector in task 1.
# vector from task 1
cat("Task 1: vector containing monthly average temperatures: \n")
cat("------------------------------------------------------\n")
print(monthly_average_temperature)
cat("\n")
# matrix from task 3
cat("Task 3: matrix containing the average temperature, humidity, pressure, and wind speed readings for each month: \n")
cat("-------------------------------------------------------------------\n")
print(monthly_averages)
cat("\n")
# matrix transpose
cat("Transpose of the matrix : \n")
cat("------------------------------------------------------\n")
mat_transpose <- t(monthly_averages)
print(mat_transpose)
cat("\n")
# matrix multiplication
product <- mat_transpose %*% monthly_average_temperature
rownames(product) <- NULL
cat("\n Product of matrix multiplication:\n")
cat("---------------------------------\n")
print(product)
monthly_pressure_readings_sum <- list()
monthly_pressure_readings_count <- list()
for (i in 1:nrow(weather)) {
key <- weather$Month[i]
pressure <- as.numeric(weather$Pressure[i])
# Check if the key (month) is already in the lists, and if not, initialize it
if (!(key %in% names(monthly_pressure_readings_sum))) {
monthly_pressure_readings_sum[[key]] <- 0
monthly_pressure_readings_count[[key]] <- 0
}
# Update the sum and count for the corresponding month
monthly_pressure_readings_sum[[key]] <- monthly_pressure_readings_sum[[key]] + pressure
monthly_pressure_readings_count[[key]] <- monthly_pressure_readings_count[[key]] + 1
}
average_monthly_pressure <- c()
for (month in names(monthly_pressure_readings_sum)) {
average_value <- monthly_pressure_readings_sum[[month]]/monthly_pressure_readings_count[[month]]
average_monthly_pressure <- c(average_monthly_pressure,average_value)
}
print("PART C: Q1: Average pressure reading for each month (using loop) and stores the results in a vector : ")
print(average_monthly_pressure)
high_temp_count <- 0
# looping through df
for (i in 1:nrow(weather)) {
# stores location
location <- weather$Location[i]
# stores the temperature
temp <- weather$Temperature[i]
# checks if location is Sydney and temp is greater than 25
if(location == 'Sydney' & temp > 25) {
# updates the temp count
high_temp_count = high_temp_count + 1
}
}
# print the output
print("PART: C: Q2: No. of days with temperature above 25 degree celcius in Sydney: ")
print(high_temp_count)
humidity_sum <- 0
days_count <- 0
for (i in 1:nrow(weather)) {
# stores location
location <- weather$Location[i]
# stores the temperature
temp <- weather$Temperature[i]
# checks if location is Canberra and temp is less than 21
if(location == 'Canberra' & temp < 21) {
# update days count
days_count <- days_count + 1
# sum humidity to calculate average
humidity_sum <- humidity_sum + weather$Humidity[i]
}
}
average_humidity <- humidity_sum/days_count
print("PART C: Q3: Average humidity for the days with a temperature below 21 degrees Celsius in Canberra: ")
print(average_humidity)
# variable to store the high uv days
high_uv_days <- 0
for (i in 1:nrow(weather)) {
# stores location
location <- weather$Location[i]
# stores the temperature
uv_index <- weather$UVIndex[i]
# checks if location is Sydney or Canberra and UV Index is greater than 7
if(location %in% c('Canberra', 'Sydney') & uv_index > 7) {
# update days count
high_uv_days <- high_uv_days + 1
}
}
print("PART C: Q4: No. of days that had a UV index reading above 7 in both Canberra and Sydney: ")
print(high_uv_days)
file_names <- c('201812.csv', '201811.csv', '201810.csv', '201809.csv', '201808.csv')
# function that appends "data/" to the file names to make it a complete file path
create_file_paths <- function(file_name) {
file_path <- paste("data",file_name, sep = "/")
return(file_path)
}
# uses sapply() function to iterate through each file name and create a list of filepaths and store in 'file_paths' variable
file_paths <- sapply(file_names, create_file_paths)
file_names <- c('201812.csv', '201811.csv', '201810.csv', '201809.csv', '201808.csv')
# function that appends "data/" to the file names to make it a complete file path
create_file_paths <- function(file_name) {
file_path <- paste("data",file_name, sep = "/")
return(file_path)
}
# uses sapply() function to iterate through each file name and create a char vector of filepaths and store in 'file_paths' variable
file_paths <- sapply(file_names, create_file_paths)
# function to read a csv file skipping first 7 lines. takes the filepath as input
custom_read_csv <- function(file_path) {
return(read.csv(file_path, skip=7))
}
# uses lapply() function to iterate through each filepath
# read each csv file as a dataframe and stores it in a list
data_list <- lapply(file_paths, custom_read_csv)
setwd("D:/workspace/ids/u3253992_ajul_assignment1")
# store filenames
file_names <- c('201812.csv', '201811.csv', '201810.csv', '201809.csv', '201808.csv')
# function that appends "data/" to the file names to make it a complete file path
create_file_paths <- function(file_name) {
file_path <- paste("data",file_name, sep = "/")
return(file_path)
}
# uses sapply() function to iterate through each file name and create a char vector of filepaths and store in 'file_paths' variable
file_paths <- sapply(file_names, create_file_paths)
# function to read a csv file skipping first 7 lines. takes the filepath as input
custom_read_csv <- function(file_path) {
return(read.csv(file_path, skip=7))
}
# uses lapply() function to iterate through each filepath
# read each csv file as a dataframe and stores it in a list
data_list <- lapply(file_paths, custom_read_csv)
dim(data_list)
combined_df <- data.frame()
for(df in data_list) {
print(dim(df))
combined_df <- rbind(combined_df, df)
}
View(data_list)
View(data_list)
dim(data_list)
dim(combined_df)
# extracts the current column names of the dataframes
col_names <- colnames(combined_df)
col_names
# iterates through each column
for(col in col_names) {
cat("Column Name: ", col, "\n")
cat('-------------------------\n')
cat("Structure: \n")
cat(str(combined_df[[col]]))
cat("\n")
cat("Summary: \n")
print(summary(combined_df[[col]]))
cat("\n")
}
which(is.na(combined_df$Evaporation..mm.))
length(which(is.na(combined_df$Evaporation..mm.)))
length(which(is.na(combined_df$Evaporation..mm.))) == length(combined_df)
length(which(is.na(combined_df$Evaporation..mm.))) length(combined_df)
nrow(combined_df)
length(which(is.na(combined_df$Evaporation..mm.))) ==
nrow(combined_df)
combined_df_colnames <- colnames(combined_df)
# get all the coloumn names of combined_df
combined_df_colnames <- colnames(combined_df)
# initialises a vector toi store column names which has all records as NA
empty_cols <- c()
# loop through each column name
for(col in combined_df_colnames) {
# no. of records in a array with NA values
na_index_length <- length(which(is.na(combined_df[[col]])))
# check if the no. of records in a array with NA values is same a the total no. of rows in the dataframe
if(na_index_length == nrow(combined_df)) {
empty_cols <- c(empty_cols, col)
}
}
empty_cols
# removes the empty columns from the dataframe
combined_df <- combined_df %>%
select(-empty_cols)
colnames(combined_df) <- gsub(" ", "_", colnames(combined_df))
# reference: https://www.geeksforgeeks.org/replace-spaces-in-column-names-in-r-dataframe/
colnames(combined_df)
class(combined_df$Date)
combined_df$Date <- as.Date(combined_df$Date, format = "%d/%m/%Y")
# uses seperate function to
combined_df <- combined_df %>%
separate(col = Date, into = c("Month", "Year"), remove = FALSE)
combined_df <- combined_df %>%
mutate(across(where(is.numeric), ~replace_na(.,median(.,na.rm=TRUE))))
write.csv(combined_df, file = "combined_weather.csv")
View(combined_df)
View(combined_df)
