for(j in 1:num_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(num_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(num_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for (i in 1:n){
no_of_stars=2*i - 1
no_of_spaces= n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for (i in 1:n){
no_of_stars=2*i - 1
no_of_spaces= n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars=2*i- 1
no_of_spaces=n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars=2*i- 1
no_of_spaces=n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
print("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
cat("*")
}
}
cat("\n")
}
n=15
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
cat("*")
}
}
cat("\n")
}
knitr::opts_chunk$set(echo = TRUE)
str(arr)
mat <- matrix(11:80, 7, 10)
print(mat)
str(mat)
arr <- array(1:60, dim= c(3,4,5))
print(arr)
str(arr)
vecX <- c(3, 9, -1, 4, 2, 6)
vecY <- c(5, 2, 0, 9, 3, 4)
matX <- matrix(vecX, 2)
print(matX)
print(matY)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vectY, 2)
print(matY)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vectY, 2)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vecY, 2)
print(matY)
print(matY[1,])
print(matY)
# Display the values of elements of the first row from matrix matX.
print(matX[1,])
# Display the value of the element in the second row and third column of matY,
print(matY[2,3])
# Sum up the two matrices and display the output,
matSum = matX + matY
print(matSum)
# Subtract the matY from matX and display the output,
matDifference = matX - matY
print(matDifference)
matProductE = matX * matY
print(matProductE)
print(matZ)
# Transpose the matY and assign the output to a third matrix called matZ,
matZ = t(matY)
print(matZ)
# Perform matrix multiplication between matX and matZ and assign the output to matW,
matW = matX %*% matZ
print(matW)
# Display the dimension of the matW matrix,
paste("Dimension of the matW, which stores the output of matrix multiplication between matX and matZ is ", dim(matW))
# Display the dimension of the matW matrix,
paste("Dimension of the matW, which stores the output of matrix multiplication between matX and matZ is ", dim(matW))
print(dim(matW))
maximum = max(matW)
paste("maximum value in matW is", maximum)
minimum = min(matW)
paste("minimum value in matW is", minimum)
average = mean(matW)
paste("average of values in matW is", minimum)
vecZ <- c(8, -3, 1, 7, 0, 4)
paste(vecX,vecY, vecZ, sep = "\n")
paste(vecX,vecY, vecZ,collapse = "\n")
paste(vecX,vecY, vecZ,collapse = "     ")
print(vecZ)
print(vecX)
print(vecY)
print(vecZ)
vecY <- c(5, 2, 0, 9, 3, 4)
print(vecX)
print(vecY)
print(vecZ)
print(class(vecY))
# Create an array from the three vector and give it a name (e.g., arrNums). The dimension of this array is (3,2,3)
arrNums <- array(c(vecX,vecY,vecZ), dim = c(3,2,3))
# what is the element of the second row and first column of the third slice of the array
element <- arrNums[2,1,3]
# print this element
print(element)
cat(max(arrNums))
min(arrNums)
median(arrNums)
mean(arrNums)
authors=c("Reda", "John", "Edward", "Ben")
year=c(2104, 2016, 2005, 2019)
publishers=c("Wiley", "Springer", "Sage", "International Books")
books <- data.frame(authors=authors, year= year, publishers= publishers)
# print the data frame entries
print(books)
# print the values of the authors entry
books$authors
# or ...
books["authors"] # what will happen if you use double square brackets? books[["authors"]]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
?airquality
knitr::opts_chunk$set(echo = TRUE)
airQ <- airquality
class(airQ)
airQ <- airquality
# what is the type of airQ ?
class(airQ)
ncols <- ncol(airQ)
nrows <- nrow(airQ)
cat("AirQuality contains of :", nrows, "rows and", ncols, "columns")
cat("AirQuality contains of ", nrows, "rows and", ncols, "columns")
# Check the type of each column/variable in this data
colnames(airQ)
for (col in colnames(airQ)) {
print(col)
}
cat(col, class(airQ[,col]))
for (col in colnames(airQ)) {
cat(col, class(airQ[,col]))
}
cat(col, class(airQ[,col]), "\n")
cat("\n")
for (col in colnames(airQ)) {
cat(col, class(airQ[,col]))
cat("\n")
}
print(airQ)
for (col in colnames(airQ)) {
cat(col, class(airQ[,col]))
cat("\n")
}
na_count <- sum(is.na(airQ[,col]))
for(col in colname(airQ)) {
na_count <- sum(is.na(airQ[,col]))
}
for(col in colnames(airQ)) {
na_count <- sum(is.na(airQ[,col]))
}
for(col in colnames(airQ)) {
na_count <- sum(is.na(airQ[,col]))
cat(col, "has", na_count, "no. of na columns.")
cat("\n")
}
for(col in colnames(airQ)) {
na_count <- sum(is.na(airQ[,col]))
cat(col, "has", na_count, "no. of na columns.")
cat("\n")
na_vec <- c(na_vec, na_count)
}
na_vec <- vector()
for(col in colnames(airQ)) {
na_count <- sum(is.na(airQ[,col]))
cat(col, "has", na_count, "no. of na columns.")
cat("\n")
na_vec <- c(na_vec, na_count)
}
print(na_vec)
cat("Columns with highest number of na values is", colnames(airQ)[col_index])
col_index <- which.max(na_vec)
cat("Columns with highest number of na values is", colnames(airQ)[col_index])
cat("Columns with highest number of NA values is", colnames(airQ)[col_index])
averages <- vector()
for( col in colnames(airQ)) {
average_col <- sum(airQ[,col])/nrow(airQ)
averages <- c(averages, average_col)
}
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- sum(airQ[,col])/nrow(airQ)
averages <- c(averages, average_col)
}
}
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- sum(airQ[,col])/nrow(airQ)
averages <- c(averages, average_col)
}
}
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- mean(airQ[,col],na.rm = TRUE)
averages <- c(averages, average_col)
}
}
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- mean(airQ[,col],na.rm = TRUE)
averages <- c(averages, average_col)
cat("average of column ", col, "is", average_col)
}
}
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- mean(airQ[,col],na.rm = TRUE)
averages <- c(averages, average_col)
cat("average of column ", col, "is", average_col, "\n")
}
}
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- mean(airQ[,col],na.rm = TRUE)
averages <- c(averages, average_col)
cat("average of column ", col, "is", average_col, "\n")
}
}
cat("-------------------------------------")
print(averages)
averages <- vector()
for( col in colnames(airQ)) {
if(is.numeric(airQ[,col])) {
average_col <- mean(airQ[,col],na.rm = TRUE)
averages <- c(averages, average_col)
cat("average of column ", col, "is", average_col, "\n")
}
}
cat("-------------------------------------\n")
print(averages)
setwd("D:/workspace/ids/week_6")
club_data_df <- read.csv("data/CopyOfclub-venues-in-the-sports-voucher-program.csv")
club_data_df <- read.csv("data/club-venues-in-the-sports-voucher-program.csv")
club_data_df
str(club_data_df)
dim(club_data_df)
str(club_data_df)
sapply(colnames(club_data_df), function(col) class(club_data_df[,col]))
sapply(colnames(club_data_df), function(col) cat(class(club_data_df[,col]), "\n") )
sapply(colnames(club_data_df), function(col) class(club_data_df[,col]))
club_data_df
club_dates_df
club_dates_df <- read.csv("data/club-created-date.csv")
club_dates_df
data_df <- cbind(club_data_df,club_dates_df)
str(data_df)
data_df[data_df$Club_Venue_Sports == "Diving"]
data_df[data_df $Club_Venue_Sports == "Diving"]
data_df[data_df $Club_Venue_Sports == "Diving",]
diving_clubs_count
diving_clubs_count <- nrow(data_df[data_df $Club_Venue_Sports == "Diving",])
diving_clubs_count
class(data_df$Creation_Date)
# convert the column to a date
data_df$Creation_Date <- as.Date(data_df$Creation_Date, format="%d,%m,%Y")
class(data_df$Creation_Date)
data_df$Creation_Date
str(data_df$Creation_Date)
data_df
club_dates_df <- read.csv("data/club-created-date.csv")
club_dates_df
data_df <- cbind(club_data_df,club_dates_df)
str(data_df)
# How many Diving club are available in South Australia that are accredited with this program?
data_df[data_df $Club_Venue_Sports == "Diving",]
diving_clubs_count <- nrow(data_df[data_df $Club_Venue_Sports == "Diving",])
diving_clubs_count
# How many clubs have been accredited with this program after 1-Jan-1990?
class(data_df$Creation_Date)
# convert the column to a date
data_df$Creation_Date <- as.Date(data_df$Creation_Date, format="%d%m%Y")
class(data_df$Creation_Date)
data_df
club_dates_df <- read.csv("data/club-created-date.csv")
data_df
data_df
club_dates_df <- read.csv("data/club-created-date.csv")
club_dates_df
data_df <- cbind(club_data_df,club_dates_df)
str(data_df)
data_df
# convert the column to a date
data_df$Creation_Date <- as.Date(data_df$Creation_Date, format="%dd%mm%Y")
data_df
club_dates_df <- read.csv("data/club-created-date.csv")
club_dates_df
data_df <- cbind(club_data_df,club_dates_df)
str(data_df)
data_df
# convert the column to a date
data_df$Creation_Date <- as.Date(data_df$Creation_Date, format="%d.%m.%Y")
data_df
club_dates_df <- read.csv("data/club-created-date.csv")
club_dates_df
data_df <- cbind(club_data_df,club_dates_df)
str(data_df)
# How many Diving club are available in South Australia that are accredited with this program?
data_df[data_df $Club_Venue_Sports == "Diving",]
diving_clubs_count <- nrow(data_df[data_df $Club_Venue_Sports == "Diving",])
diving_clubs_count
# How many clubs have been accredited with this program after 1-Jan-1990?
class(data_df$Creation_Date)
# convert the column to a date
data_df$Creation_Date <- as.Date(data_df$Creation_Date, format="%d/%m/%Y")
class(data_df$Creation_Date)
data_df
data_df[data_df$Creation_Date >= as.Date("1990-01-01")]
data_df[data_df$Creation_Date >= as.Date("1990-01-01"),]
nrow(data_df[data_df$Creation_Date >= as.Date("1990-01-01"),])
write.csv(data_df, file="club_sports_merged.csv")
