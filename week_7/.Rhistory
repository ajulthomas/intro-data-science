nums <- rnorm(50, mean=2, sd=3)
nums
pos_nums <- nums[nums > 0]
pos_nums
neg_nums <- nums[nums < 0]
neg_nums
length(neg_nums)
length(pos_nums)
length(nums)
var <- 2:5
var
var[-3]
class(var)
var
var[3]
var[-3]
u <- c(4,6,1,NA,2)
class(u)
var1 <- 2:5
var2 <- c(3,7)
var1+var2
c <- var1 + var2
c
var1
var2
var2 <- c(4,5,6,7)
c <- var1 + var2
c
vec <- c("Male", "Female", "Male", "Female", "Male")
fact_sex <- factor(vec)
str(vec)
str(fact_sex)
u<-c(4, 6.1, NA, 2)
class(u)
var1 <- 2:5
var2 <- c(3, 7)
var1 + var2
var2 <- c(TRUE, FALSE)
var1 * var2
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6)
z <- x[y]
z
var1 + var2
knitr::opts_chunk$set(echo = TRUE)
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(num_of_spaces > 0) {
for(j in 1:num_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(num_of_spaces > 0) {
for(j in 1:num_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(num_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(num_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n = 10
for (i in 1:n){
no_of_stars = 2*i - 1
no_of_spaces = n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for (i in 1:n){
no_of_stars=2*i - 1
no_of_spaces= n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for (i in 1:n){
no_of_stars=2*i - 1
no_of_spaces= n -i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars=2*i- 1
no_of_spaces=n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars=2*i- 1
no_of_spaces=n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no-of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
cat("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
print("*")
}
}
}
n=10
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
cat("*")
}
}
cat("\n")
}
n=15
for(i in 1:n){
no_of_stars <- 2*i- 1
no_of_spaces <- n-i
if(no_of_spaces > 0) {
for(j in 1:no_of_spaces){
cat(" ")
}
}
if(no_of_stars > 0) {
for(k in 1:no_of_stars) {
cat("*")
}
}
cat("\n")
}
knitr::opts_chunk$set(echo = TRUE)
str(arr)
mat <- matrix(11:80, 7, 10)
print(mat)
str(mat)
arr <- array(1:60, dim= c(3,4,5))
print(arr)
str(arr)
vecX <- c(3, 9, -1, 4, 2, 6)
vecY <- c(5, 2, 0, 9, 3, 4)
matX <- matrix(vecX, 2)
print(matX)
print(matY)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vectY, 2)
print(matY)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vectY, 2)
# Create a matrix matX, from the vector (vecX), where number of rows are 2,
matY <- matrix(vecY, 2)
print(matY)
print(matY[1,])
print(matY)
# Display the values of elements of the first row from matrix matX.
print(matX[1,])
# Display the value of the element in the second row and third column of matY,
print(matY[2,3])
# Sum up the two matrices and display the output,
matSum = matX + matY
print(matSum)
# Subtract the matY from matX and display the output,
matDifference = matX - matY
print(matDifference)
matProductE = matX * matY
print(matProductE)
print(matZ)
# Transpose the matY and assign the output to a third matrix called matZ,
matZ = t(matY)
print(matZ)
# Perform matrix multiplication between matX and matZ and assign the output to matW,
matW = matX %*% matZ
print(matW)
# Display the dimension of the matW matrix,
paste("Dimension of the matW, which stores the output of matrix multiplication between matX and matZ is ", dim(matW))
# Display the dimension of the matW matrix,
paste("Dimension of the matW, which stores the output of matrix multiplication between matX and matZ is ", dim(matW))
print(dim(matW))
maximum = max(matW)
paste("maximum value in matW is", maximum)
minimum = min(matW)
paste("minimum value in matW is", minimum)
average = mean(matW)
paste("average of values in matW is", minimum)
vecZ <- c(8, -3, 1, 7, 0, 4)
paste(vecX,vecY, vecZ, sep = "\n")
paste(vecX,vecY, vecZ,collapse = "\n")
paste(vecX,vecY, vecZ,collapse = "     ")
print(vecZ)
print(vecX)
print(vecY)
print(vecZ)
vecY <- c(5, 2, 0, 9, 3, 4)
print(vecX)
print(vecY)
print(vecZ)
print(class(vecY))
# Create an array from the three vector and give it a name (e.g., arrNums). The dimension of this array is (3,2,3)
arrNums <- array(c(vecX,vecY,vecZ), dim = c(3,2,3))
# what is the element of the second row and first column of the third slice of the array
element <- arrNums[2,1,3]
# print this element
print(element)
cat(max(arrNums))
min(arrNums)
median(arrNums)
mean(arrNums)
authors=c("Reda", "John", "Edward", "Ben")
year=c(2104, 2016, 2005, 2019)
publishers=c("Wiley", "Springer", "Sage", "International Books")
books <- data.frame(authors=authors, year= year, publishers= publishers)
# print the data frame entries
print(books)
# print the values of the authors entry
books$authors
# or ...
books["authors"] # what will happen if you use double square brackets? books[["authors"]]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
books[1,2]
setwd("D:/workspace/ids/week_7")
knitr::opts_chunk$set(echo = TRUE)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
library(nycflights13)
df <- flights
df
filter(df, arr_delay >= 120)
df
l <- filter(df, arr_delay >= 120)
View(df)
View(df)
houston_df <- filter(df, dest %in% c('IAH','HOU'))
View(houston_df)
View(houston_df)
houston_df <- filter(df, dest == 'IAH' | dest == 'HOU')
operator_filter <- filter(df, carrier %in% c('UA','AA','DL'))
operator_filter
flights
filter(df, month %in% c(7,8,9))
filter(df, dep_delay <= 0 & arr_delay >= 120)
# 6 Were delayed by at least an hour, but made up over 30 minutes in flight
filter(df, dep_delay >= 60, arr_delay - dep_delay > 30)
filter(def, between(dep_time, 000, 600))
filter(df, between(dep_time, 000, 600))
filter(df, is.na(dep_time))
cancelled_flights <-  filter(df, is.na(air_time))
group_by_month
group_by_month <- group_by(cancelled_flights, month)
group_by_month
groupedby_month <- group_by(cancelled_flights, month)
grouped_by_month <- group_by(cancelled_flights, month)
grouped_by_month
cancelled_flights <-  filter(flights, is.na(air_time))
grouped_by_month <- group_by(cancelled_flights, month)
grouped_by_month
View(grouped_by_month)
View(grouped_by_month)
counts_per_month <- summarize(grouped_by_month, count=n())
counts_per_month
counts_per_month <- summarise(grouped_by_month, count=n())
counts_per_month
highest_prop <- summarise(counts_per_month, max_month=month[which.max(count)], max.value=max(count))
highest_prop
lowest_prop <- summarise(counts_per_month, min_month=month[which.min(count)], min.value=min(count))
lowest_prop
counts_per_month
